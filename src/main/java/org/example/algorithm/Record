想看面试准备过程的在这：
TimothyL：一个大龄博士的刷题转码之路
前言：
这是本人在7个月刷了500道Leetcode题目并成功拿到几家北美Software Engineer Offer之后总结的Leetcode高频面试题目分类总结。这篇是高频题目的概述性总结，以后有时间打算单独给每个门类写一个详细的总结。希望对准备刷题面试的你有所帮助吧，谢谢！
注：本文一共200多道题，算上一些附加的衍生题差不多有250+，基本上很少有easy题目，大部分都是medium，少部分hard，按照大多数人30% Easy，60% Medium， 10% Hard的刷题标准，刷好下面全部的题目相当于300题，刷好足够应对大部分的算法面试了。如果你对算法与数据结构基础知识掌握的不够的情况下，先按照下面文章说提到的基础补好再开始刷对应门类的题目，不然很容易“一个人一包烟，一道题目刷一天”。
注：作者在北美各个大厂几乎全部面过，G家 A家 U家之类的大厂offer也都拿到过，可以确定刷好本文中的所有题以及掌握每道题对应知识点可以应对绝大多数的码农算法面试了。
如果题目/答案看不懂又不喜欢看discussion的话，现在有很多视频资源可以看。个人比较喜欢花花酱的讲解（花花酱的表世界的个人空间_哔哩哔哩_Bilibili）， 墙外的同学们也可以看关神的视频讲解（https://www.youtube.com/channel/UCY5Z0of98W-YSdmPgAe1DaA）。
不建议刷的题目类型：

非高频的hard题目，费时费力又很难在面试中遇到，性价比太低。
贪心法题目，每道题都不一样，解法没有通用性。
以下8个门类是面试中最常考的算法与数据结构知识点。

排序类（Sort）：
基础知识：快速排序（Quick Sort）， 归并排序（Merge Sort）的原理与代码实现。需要能讲明白代码中每一行的目的。快速排序时间复杂度平均状态下O（NlogN），空间复杂度O（1），归并排序最坏情况下时间复杂度O（NlogN），空间复杂度O（N）
入门题目：
Leetcode 148. Sort List # 值得多看几次
    dummy的用处. 1. 当tail , 2. 当head
    for (int n = 1; n <= len; n <<= 1) // 切0个准备切个鬼哦
    cur: 后续链表的头, left = cur, right = split(left, n), cur = split(right, n); tail是上一段链表的尾. tail.next = merge(left, right).
    重点是split方法和merge方法 --> merge方法简单，
    split方法也还行--k > n(保证n = 1的时候只切一个下来) 大部分情况下条件 cur.next != null. 这里需要 cur != null;
    最后tail.next = null. return tail.next;
    for while while 三层循环 第三个while是让tail指向当前段的最后一个元素
    框架对了 主要是细节和split merge的写法 需要记住

Leetcode 56. Merge Intervals
    系统排序方法: Arrays.stream(intervals).sorted(Comparator.comparingInt(k -> k[0])).collect(Collectors.toList());
    三种情况对比，后两种可以简化为Max

Leetcode 27. Remove elements
    通过shift的方式 遇到target就+1，后面的数往前移shift个, 这题是简单模式，后面的可以直接丢过来, 不需要顺序
    数组的swap可以被单独抽出来方便

进阶题目：
Leetcode 179. Largest Number
    根据字符串的首位到尾位开始排序，重要的是遇到一位数和两位数的时候，排序方式是看第二位是否大于第一位，是的话排前面
    // 上面这个是常规思路
    遇到这种情况更方便的做法事两数分别相加(保证长度一致)，逐个对比: 在sorted函数中

Leetcode 75. Sort Colors
    超过三色就只能用快排了，三色可以以1为标准，遇到0从头排，遇到2从尾排，排了之后当前的i不能++，还需要判断 相当于三指针
    看题解用到是比较巧妙的方式 nums[nums2++] = 2 其中nums2 = 基本上等于当前的指针 三指针进行轮番覆盖

Leetcode 215. Kth Largest Element # 很经典的QuickSelect的题目
    快排三步法，tmp = arr[low]
    while {while{} high-- arr[low] = arr[high], while{} low++ arr[high] = arr[low]} arr[low] = tmp; // 找到tmp[low]在中间的哪个位置
    快选多了一个判断 index > k 排左边，index < k 排右边 return nums[nums.length - k];

Leetcode 4. Median of Two Sorted Arrays # 太难了 后面再看吧 妈的终于 搞定了 不对 应该是看懂了 后面再复习的时候自己再写一遍 很多点都值得思考
困难可太困难了，主要是两边分别取中位数，然后根据两边的值进行调整
注意：后两题是与快速排序非常相似的快速选择（Quick Select）算法，面试中很常考

链表类（Linked List）：
基础知识：链表如何实现，如何遍历链表。链表可以保证头部尾部插入删除操作都是O（1），查找任意元素位置O（N）
基础题目：
Leetcode 206. Reverse Linked List
    用上dummy while node.next != null, next = node.next, node.next = dummy.next, dummy.next = node; node = next;
    需要先保存next对象，用上dummy之后整个代码都变简洁了, 前提对dummy有个清晰的认知

Leetcode 92. Reverse Linked List II
    翻转链表的高级版 前面需要做几个步骤
    1. dummy = new ListNode; 为了防止链表从头开始翻转还是需要new一个
    2. 记录cur = 链表开始翻转的head while (--count = left > 0);
    3. dummy.next = 翻转部分tail的next; while (--count = right - left >= 0); dummy.next = dummy.next.next;
    4. 跟206一样的步骤
    5. 根据是否从头开始翻转选择返回dummy.next = head or head;

Leetcode 876. Middle of the Linked List
注意：快慢指针和链表反转几乎是所有链表类问题的基础，尤其是反转链表，代码很短，建议直接背熟。
    while fast != null && fast.next != null;
    return fast == null ? slow : slow.next; 十个元素会返回第六个节点，前面的链表总是比较长

进阶题目:
Leetcode 160. Intersection of Two Linked Lists
    把两个链表拼在一起 两边分别往下走，当node相等的时候就是Interaction

Leetcode 141. Linked List Cycle (Linked List Cycle II)
    快慢指针或者哈希表 因为结束条件是node = node
    II 精妙绝伦的数学  f = 2s, f = s + nb; s = nb, f = 2nb;
    一共分别走了n个环周长和2n个环周长，加上a就相遇了 + 1才相遇

Leetcode 328. Odd Even Linked List
    两个dummy头 while中四行代码

Leetcode 61. Rotate List
    1. 校验边界 head == null || head.next == null || k == 0;
    2. 获取长度和尾部以及旋转的次数 len. k % len. k = len - k;
    3. 断头断尾、头尾相连: tail.next = head; newTail.next = null; return newHead;

堆（Heap or Priority Queue）、栈（Stack）、队列（Queue）、哈希表类（Hashmap、Hashset）：
基础知识：各个数据结构的基本原理，增删查改复杂度。
Queue题目：
Leetcode 225. Implement Stack using Queues
Leetcode 346. Moving Average from Data Stream  # done 思想很简单，细节要注意挺多 比如queueSize
Leetcode 281. Zigzag Iterator # leetcode plus // yue 主要那个k给我傻到了 行了知道了
Leetcode 1429. First Unique Number # leetcode plus 这些题好像都不常见 done; 通过哈希去判断是否重复，重点是出入队的条件
// =================
Leetcode 54. Spiral Matrix
Leetcode 362. Design Hit Counter # leetcode plus done

Stack题目：
Leetcode 155. Min Stack (follow up Leetcode 716 Max Stack # leetcode plus)
Leetcode 232. Implement Queue using Stacks
Leetcode 150. Evaluate Reverse Polish Notation
Leetcode 224. Basic Calculator II (I, II, III, IV) IV基本没遇到过 III也很少遇到
Leetcode 20. Valid Parentheses
Leetcode 1472. Design Browser History
Leetcode 1209. Remove All Adjacent Duplicates in String II
Leetcode 1249. Minimum Remove to Make Valid Parentheses
Leetcode 735. Asteroid Collision
Hashmap/ Hashset题目： 8题
Leetcode 1. Two Sum
Leetcode 146. LRU Cache 要求默写核心是双向链表(head, tail 其中tail存储最近使用的) + 哈希
    还有一个核心是Node节点要自己实现，包括next和prev
    LinkedList之所以只有头尾是因为他的Node是内部包装的结构不对外透出，所以没法找到某个节点进行next和prev
    我昨天懵也是懵在这里 为什么LinkedList好像从来没听过prev和next 但是明明是双向链表啊 啊 啊
    LFU可能就是一个跳表结构了

    removeInList: 两步走 node != head, node != tail 处理头尾之间链接的问题
    put: cache.put + addLast

Leetcode 128. Longest Consecutive Sequence
Leetcode 73. Set Matrix Zeroes
Leetcode 380. Insert Delete GetRandom O(1)
Leetcode 49. Group Anagrams
Leetcode 350. Intersection of Two Arrays II
Leetcode 299. Bulls and Cows
Leetcode 348 Design Tic-Tac-Toe    leetcode plus
Heap／Priority Queue题目： 12题
    第K个和前K个的区别，前者用快QuickSelect，后者要用Heap/PriorityQueue
    那什么情况下用快排？既然堆排更快的话？Heap的缺点是每次只能拿最小或者最大的数，但是QuickSort可以拿任意数
    如果需要区间内的最大值和最小值，就用双单调队列
Leetcode 973. K Closest Points ============> Done here 2022-02-06 now is 2022-10-13
Leetcode 347. Top k Largest Elements
Leetcode 23. Merge K Sorted Lists
Leetcode 264. Ugly Number II
Leetcode 1086. High Five            leetcode plus
Leetcode 88. Merge Sorted Arrays
Leetcode 692. Top K Frequent Words
Leetcode 378. Kth Smallest Element in a Sorted Matrix

Leetcode 295. Find Median from Data Stream
    中位数的题目求解一定要用double, 有两个容器互导一定要考虑两边的情况

Leetcode 767. Reorganize String
    最重要的是判断条件和插入方式 看到需要能回顾起来: Character的计数可以用arr做 -> 更geek
    PriorityQueue的一个常用的方式 HashMap计数，通过PriorityQueue进行初始化，别忘记把数据插进去，接着一个个的拿出来进行一层层的铺设
    ⭐️⭐️

Leetcode 1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit (这个题用单调双端队列、TreeMap、双heap都可以) // 未完成
    滑动窗口适用条件: 数组 + 窗口 /  像题目中是要求窗口内最大值和最小值的差不是左右两端的，需要用到单调队列
    Sliding Window: 快速确定移动窗口中的最大最小值
    1. Each time expend the window to the right;
    2. Shrink the left side to make it valid;
    Key: query the min/max of a dynamic subarry
    因为left和right都只会走一次，所以可以直接for(int right = 0; right < length; right++) 的方式走
    两个单调队列可以在O(n)的时间维护一个区间内的最大最小值, 每个值都会加入两个队列，不同的是会把老油条挤走多少个
    这道题第一次做 还好有花花酱

Leetcode 895. Maximum Frequency Stack [hard]
    我们关心每个元素和他的频率 counter.
    我们关心maxFreq，需要用一个变量记载，之前不敢用是因为不知道maxFreq之间有没有断层，但是可以用手段避免断层，即判断有没有嘛
    配合第三个freq -> Stack两者之间的hashMap，通过stack.size()就能弥补断层
    有遇到这种情况还可以通过sequenceNumber++的方式在入栈的时候就把他的序号带进去，方便进行直接排序

（Binary Search）：
基础知识：二分法是用来解法基本模板，时间复杂度logN；常见的二分法题目可以分为两大类，显式与隐式，
即是否能从字面上一眼看出二分法的特点：要查找的数据是否可以分为两部分，前半部分为X，后半部分为O
总结二分法的模板，以及注意点。二分法模版分成递归法和迭代法 测试的时候就拿example上 好好推演一遍
递归二分法在递归的时候因为确定nums[mid] != target, 所以递归调用的时候可以不用考虑mid节点，传mid + 1, right或者left, mid - 1;
二分法的方法起初有个核心的判断 left >= right && return -1; 具体看SimpleBinarySearch
显式二分法： 7题
Leetcode 34. Find First and Last Position of Element in Sorted Array
Leetcode 33. Search in Rotated Sorted Array
    // 数组一分为二，分成有序的和无序的，可能两部分都是有序的。看题画图ok? 根据nums[mid]和nums[right]的比较

Leetcode 1095. Find in Mountain Array
    // 上一题的进阶题 回想一下 findPeek时候的痛苦[0, 1]
    // 记住!!peek的条件只是midValue > mid + 1 Value 有顶点就一定有分别，到底分到左边还是右边，决定了返回是left还是right
    // while(left <= right) 什么时候要等号 while的条件里面有判断相等的时候需要等号
    // 算是大概弄懂了 我滴个呱呱 一天两道题
Leetcode 162. Find Peak Element
Leetcode 278. First Bad Version
Leetcode 74. Search a 2D Matrix
    感觉做的稀里糊涂的 边界问题搞死人 如果没有mountain的情况一律用 == return的方式
    找到那一行，然后行内二分
Leetcode 240. Search a 2D Matrix II
    // 明天再来想把 二分法真给我搞没了 有没有发现二刷没有像一刷那么难嘞 好像是哦而且写出来的代码也变简洁了
    // 四种解法 这个就很难
隐式二分法： 8题 // 问自己一句 能不能用二分
Leetcode 69. Sqrt(x)
    求两数的平均值，为了防止溢出 avg = left + (right - left) / 2;
    为了防止溢出，乘法最好改成除法
    return left or right? 取决于你对他们的定义
Leetcode 540. Single Element in a Sorted Array
Leetcode 644. Maximum Average Subarray II leetcode plus && 困难 && 微软也不考 算了把宝
Leetcode 528. Random Pick with Weight
    前缀和 + 二分法 前缀和也是这种权重概率类问题的解法之一
    // 真的简单 只是random.nextInt(range) 这个range不要弄错了 是最大值而不是最大Index

Leetcode 1300. Sum of Mutated Array Closest to Target // hi 真难受 不做了 // new message 铁子们 我跨过去了！！
    // 前缀和 记住就行了 每次判断的条件是前面的都加起来 后面的都变成nums[mid] 和target进行比较判断 k
    // 两个边界考虑起来很难吗?哥 还有close to target 小数的情况下会存在两个值 需要跟target进行比较 接近的那个才是答案
    // 以及核心的二分法判断式 突然觉得二分本身好简单 最重要的就是搞清楚我们在分什么 right代表了什么 很多都是mountain
Leetcode 1060. Missing Element in Sorted Array leetcode plus
    // 1. 考虑边界 2. 考虑核心表达式 3. 考虑返回的内容
Leetcode 1062. Longest Repeating Substring leetcode plus
    // 这题我没心情把他看懂
Leetcode 1891. Cutting Ribbons leetcode plus
// 所以后面这些题当时都没刷过了咯 = =
// 对二分的有感觉了

双指针（2 Pointer）： 19题
基础知识：常见双指针算法分为三类，同向（即两个指针都相同一个方向移动），
背向（两个指针从相同或者相邻的位置出发，背向移动直到其中一根指针到达边界为止），
相向（两个指针从两边出发一起向中间移动直到两个指针相遇）
背向双指针：(基本上全是回文串的题)
Leetcode 409. Longest Palindrome
Leetcode 125. Valid Palindrome
    奇怪的这题 代码感觉没错但是最后一个case过不了
Leetcode 5. Longest Palindromic Substring  这题的正解是dp 和上面一题1062一样 等dp把
    for字符串的每个位置，双指针向两侧游走，而且是同时兼顾单回和双回的情况，i, i -> i, i + 1
    根据单回和双回，判断比较长和max的那个然后对字符串进行substring

相向双指针：(以two sum为基础的一系列题)
Leetcode 1. Two Sum (这里使用的是先排序的双指针算法，不同于hashmap做法) 那就是暴力了 不用写了...
Leetcode 167. Two Sum II - Input array is sorted (都说用指针了 constant为常数 O(1) 如果用hash的话就是O(n)了)
    因为是排序的，指针从两头往中间走，根据和target的大小判断走哪个指针
Leetcode 15. 3Sum
    不能用哈希表做, 双指针要注意去重方式和index和num之间不要搞混
Leetcode 16. 3Sum Closest
    总体思路没错 注意细节, 如果有存在对比变量，对比变量的初始值要小心

Leetcode 18. 4Sum
    傻逼 注意溢出 long sum = (long) nums[first] + nums[second];
Leetcode 454. 4Sum II
    和上面一题不一样 这是四个数组 可以使用两两数组求和的办法 变成两数之和
    N个数组内数字求和的方式都可以这么做
Leetcode 277. Find the Celebrity  ======== > leetcode plus
    脑筋急转弯 我认识谁而谁又认识我
Leetcode 11. Container With Most Water
    如果最大的两个数在中间怎么办 [1, 2, 3, 24, 25, 5]; 需要让两个指针比较小的那个移动来碰碰运气 满足这种最极端需求的才是正确的解
    这道面试题考的可多了 要记住

同向双指针：（个人觉得最难的一类题，可以参考下这里 TimothyL：Leetcode 同向双指针/滑动窗口类代码模板）
// 搜类SlideWindowTemplate
Leetcode 283. Move Zeroes
    就算是简单的也要模拟一下输入，还是浮躁，我都能感觉到
    醉了 这么简单一道题 果然做数学题的时候脑子都要清楚
    因为要有序，p1p2必须都从左边走，nums[p1] nums[p2] 有四种情况分别进行考虑
Leetcode 26. Remove Duplicate Numbers in Array
    和上一道题一起组成 什么移0️⃣去重剩下的数据放一边队伍
    返回值也要好好考虑考虑
Leetcode 395. Longest Substring with At Least K Repeating Characters
    离谱 我就这么被绕进去了
    往往中等题的思路都不复杂 如果能get到那个点
    通过根据s中不满足k个数的char进行分割 对每一块儿再进行递归的分割 然后挨个比较
Leetcode 340. Longest Substring with At Most K Distinct Characters  leetcode plus

Leetcode 424. Longest Repeating Character Replacement *** 还需要再考虑看看 后面再来回味吧 先往前走走看
    // 可以说一遍过 核心还是搞清楚到底shrink的条件是什么 而且遇到的类型分成 只关心most 关心most和second 因为second会接盘
    我是用most和other来的 必要的时候遍历获取second ⭐⭐⭐️ 滑动窗口代表作之一

Leetcode 76. Minimum Window Substring // 这tm就是变态 巨难 后面再好好看看题解 2020-10-18征服 yeah
    什么时候需要进行Math.max()的比较也要注意 比如这道题就在rightChar入范围的时候 上面一题就在完成shrink的时候
    这就是minimum和longest的区别
    有一点 minimum是每次shrink的时候都要对比 对比放在shrink的while里
    注意indexOf > -1, 注意不知道能不能重复的时候看一下 示例输入

Leetcode 3. Longest Substring Without Repeating Characters  ** 模板方法的基础版本
    统计的地方很奇怪 变成每次right + 1满足条件的时候
    好像也是，这里满足条件直接continue的 之前的longest
    ⭐⭐⭐️ 滑动窗口代表作之二

Leetcode 1004 Max Consecutive Ones III ===> done here
    完全没阻碍

BinaryTree
    前序遍历中序遍历后序遍历 都是针对father节点做业务逻辑来说的，father left right 就是前序，left father right 就是中序，left right father 就是后序
    遇到很多对比和返回的数据内容是不一样的
104 Maximum Depth of Binary Tree: 最简单
110 Balanced Binary Tree: 加上剪枝
    还是应该每个地方都判断有没有不满足条件的需要向上传递 不然会误判，max的返回只会让下面的错误被掩盖
543 Diameter of Binary Tree
    不仅仅是左树和右数比，每棵子树的深度和最长可达是两个不同的值，需要引入额外变量
    也不能简单的把题意翻译成为，左子树和右子树的最高高度 之所以是left + right不用加一是因为放到数组里的下标是要 - 1的
    max = max(max, left + right); return max(left, right) + 1;
437 Path SumII
    From top to bottom / choose or not choose
    SumWithRoot + Sum(left) + Sum(right);
    求总和 = target的可以把target传下去的时候每次扣减当前的val 共用一个参数
101 Symmetric Tree
    抓住核心思想 left.left = right.right; 以及几种判断true false的情况
1110 Delete Node And Return Forest dfs
    进行后续遍历，先获得左右子树的结果，然后判断如果节点被删除，是否需要把左右子树加入到headList
    如果要删除，不要忘记返回null给爸爸哦

FS优先搜索:
    广度优先:
        搜索最明显的特征是用到了队列结构，每次前进一步把可能性都加入队列，挨个poll出来执行
        也不一定是队列结构，只要步骤是有限的，比如树的左右子树节点，地图的上下左右，就可以在代码里面写死
        通过stack/queue和正序倒序可以做到比较灵活 可以替换掉递归结构 递归的消耗比较大 通过queue.size保证这一层的拿完不会拿到下一层

    深度优先搜索最明显的就是有一个map记录走过的路劲，先一条路走到底直到不满足条件就退回来换一边，递归和回溯
    DFS适合目标明确，BFS适合大范围查找 BFS空间复杂度高，专门用作寻找最短路劲
    递归的缺陷可以用
宽度优先搜索（BFS）：面试中最常考的 20题
基础知识：
常见的BFS用来解决什么问题？(1) 简单图（有向无向皆可）的最短路径长度，注意是长度而不是具体的路径（2）拓扑排序 （3） 遍历一个图（或者树）
BFS基本模板（需要记录层数或者不需要记录层数）
多数情况下时间复杂度空间复杂度都是O（N+M），N为节点个数，M为边的个数
基于树的BFS：不需要专门一个set来记录访问过的节点
Leetcode 102 Binary Tree Level Order Traversal 回忆起了以前做题的感觉
    迭代要比递归优秀的多 在性能上，可读性也不差
Leetcode 103 Binary Tree Zigzag Level Order Traversal
    先估计下这道题跟上道题难度差不多 inorder ? false : true
    略麻烦，主要是当层打印要顺序，加入queue的节点要逆序并且左右子树有差异，两者只能分开来了，poll出来的时候把val加进去，push到stack，从stack捞出来判断左右子树入queue

Leetcode 297 Serialize and Deserialize Binary Tree （很好的BFS和双指针结合的题）
    等等吧 最后有一关过不去了
Leetcode 314 Binary Tree Vertical Order Traversal
    核心是 HashMap<Integer, Queue<TreeNode>> 记录column和对应节点列表

基于图的BFS：（一般需要一个set来记录访问过的节点）
    图的一个问题 有可能图点和点之间是分开的 如果按照之前的bfs的写法遇到第一个点是空的[]就悲催了 直接GG
    for 在最外层 for (point: pointList) { while在里面 里面会波及到co节点 并且把未被处理过的co节点offer进去进行传播 }
Leetcode 200. Number of Islands
Leetcode 133. Clone Graph
Leetcode 127. Word Ladder
Leetcode 490. The Maze
Leetcode 323. Connected Component in Undirected Graph
Leetcode 130. Surrounded Regions
Leetcode 752. Open the Lock
Leetcode 815. Bus Routes
Leetcode 1091. Shortest Path in Binary Matrix
Leetcode 542. 01 Matrix ✅
    一开始想的方案是bfs广度优先，那复杂度会变成恐怖的O(m x n);
    简单的方法是，我们从左上到右下进行一次动态搜索，再从右下到左上进行一次动态搜索。两次动态搜索即可完成四个方向上的查找
    再反思，对于这种像波浪扩散的是不是都可以进行两次动态，左上到右下一次，右下到左上一次;
    步骤 初始化res[][] fill Integer.MAX_VALUE 因为要找最小的
    在左上到右下过程中是判断上方和左方来的 + 1 注意溢出判断
    在右下到左上过程中还要多带一个判断自己，即自己、右方、下方三者一起判断min
Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination
拓扑排序：（https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F）
Leetcode 207 Course Schedule （I, II）
Leetcode 444 Sequence Reconstruction
Leetcode 269 Alien Dictionary
Leetcode 310 Minimum Height Trees
Leetcode 366 Find Leaves of Binary Tree

深度优先搜索（DFS）：面试中最常考的
基础知识：
常见的DFS用来解决什么问题？(1) 图中（有向无向皆可）的符合某种特征（比如最长）的路径以及长度（2）排列组合（3） 遍历一个图（或者树）（4）找出图或者树中符合题目要求的全部方案
DFS基本模板（需要记录路径，不需要返回值 and 不需要记录路径，但需要记录某些特征的返回值）
除了遍历之外多数情况下时间复杂度是指数级别，一般是O(方案数×找到每个方案的时间复杂度)
递归题目都可以用非递归迭代的方法写，但一般实现起来非常麻烦
基于树的DFS：需要记住递归写前序中序后序遍历二叉树的模板
Leetcode 226 Invert Binary Tree
    ::== 就挺秃然的
Leetcode 951 Flip Equivalent Binary Trees
    不难，注意头结点的对比，当对比左右子树的值的时候，记得要判空，当然这题不需要判左右子树的值
Leetcode 236 Lowest Common Ancestor of a Binary Tree (相似题：235、1650)
    妙啊 返回的节点是找到的p或者q 根据left和right返回的值决定到底给上层什么，如果left和right都在说明一个从左子树来一个从右子树来需要return root;
Leetcode 105 Construct Binary Tree from Preorder and Inorder Traversal
    前序中序后序 指的是处理node的逻辑顺序
    好难啊 这道题先晾一晾 总的规则就是说 通过preorder[p1]找到inorder[rootPos]=p1把inorder分成两部分，一部分是左子树，一部分是右子树，然后两边分别求解
    左闭右开区间，如果s0 > e0 return null;
    int mid = preorder[s1], index = map.get(mid), leftLen = index - s0;
    TreeNode node = new TreeNode(mid);
    node.left = buildSubTreeTwo(preorder, s0, index - 1, s1 + 1);
    node.right = buildSubTreeTwo(preorder, index + 1, e0, s1 + 1 + leftLen);Leetcode 987 Vertical Order Traversal of a Binary Tree 困难
Leetcode 124 Binary Tree Maximum Path Sum 困难
Leetcode 1485 Clone Binary Tree With Random Pointer
Leetcode 863 All Nodes Distance K in Binary Tree 有点难 涉及到复杂的图
Leetcode 572 Subtree of Another Tree
    简单题有点儿不简单，分成searchNode和compareWholeTree, 其中虽然说是子树，但是只是val层面的，需要判空然后再比较val是否相等
    注: 可能会有多个val值相同的子节点
    优雅，每个节点都去判断是不是相同树，是不是子树 所以额外多些一个相同树的判断就行了

二叉查找树和完全二叉树的区别，完全二叉树只能保证父比子大且父子的关系一定是i, 2 * i, 2 * i + 1;
二叉搜索树（BST）：BST特征：中序遍历为单调递增的二叉树，换句话说，根节点的值比左子树任意节点值都大，比右子树任意节点值都小，
增删查改均为O（h）复杂度，h为树的高度；注意不是所有的BST题目都需要递归，有的题目只需要while循环即可
Leetcode 99 Recove Binary SearchTree 困难的可以放一放
Leetcode 230 Kth Smallest element in a BST
    直接中序遍历不就行了，都加到集合中。巨简单 不超过十行代码，可以优化空间，不需要集合，就只要两个变量。
    o--k1 == 0: ans = node.val return;
    还有一个迭代版本的 需要一个Queue = LinkedList<>()
Leetcode 669 Trim a Binary Search Tree
    done: 很简单 判断当前值和左右边界的关系，如果超出边界，就可以只处理另外一边(相当于抛弃当前节点); 不然就可以保留节点，继续处理左右子树
Leetcode 98 Validate Binary Search Tree
    如果test case里面有最大边界值 需要把对应的数据改成long
    还是按照马能发我那文档上说的，把逻辑着重处理node相关，儿孙自有儿孙福，所以node要判空
    验证BST用的是判断对应node.val在不在区间范围内 而不是光比父节点大就行了
Leetcode 270 Closest Binary Search Tree Value
    这题还好testcase里面没有负数 更没有-1 所以当子树为null的时候可以通过-1去替代，不然就要在函数里面把判断左右节点和父节点的差值判断写出来
Leetcode 235 Lowest Common Ancestor of a Binary Search Tree
    做过一样的一次过 判空 判断是否是两个节点 返回 通过左节点和右节点的dfs判断应该返回什么

Leetcode 700 Search in a Binary Search Tree
    emmmm 最简单了

Leetcode 108 Convert Sorted Array to Binary Search Tree
    越来越优雅了 判空和逻辑和拼接什么的 👍🏻
Leetcode 333 Largest BST Subtree (与98类似)
    是挺像的 count和isValid分开写就很简单
    后面可以看看二叉树的迭代方法

Leetcode 285 Inorder Successor in BST (I, II)
    I: 利用中序遍历的特定 找到一个节点的值比给定节点要大，就是我们要找的给定节点的successor
    II: 如果有右子树，答案一定是右子树的最左边的节点，比node大的最小值，如果没有右子树，找爷爷节点，想上找到root为止，最后还要判断是否cur.val > node.val;
    BST可以简单的用node和target判断到底走左子树还是右子树

基于图的DFS: 和BFS一样一般需要一个set来记录访问过的节点，避免重复访问造成死循环; Word XXX 系列面试中非常常见，例如word break，word ladder，word pattern，word search。
Leetcode 341 TreeNode root, TreeNode target, int k Flatten Nested List Iterator (339 364)
Leetcode 394 Decode String
    搞定 遇到()[]还是用栈
Leetcode 51 N-Queens (I II基本相同)
Leetcode 291 Word Pattern II (I为简单的Hashmap题)
    双向映射、双向奔赴
Leetcode 126 Word Ladder II （I为BFS题目）
    难是不难的，稍微有点复杂。 用的dfs，停止条件是l1 && l2 == len return true, l1 == len || l2 == len return false;
    然后区分已经有匹配过的和没有匹配过的，分别进行更深一层的dfs，没匹配过的要确认word没有被添加过 that's all
Leetcode 93 Restore IP Addresses
    就很dfs 很经典 这题要好好关注 我都没怎么写过像样的dfs
Leetcode 22 Generate Parentheses
Leetcode 586 Score of Parentheses
Leetcode 301 Remove Invalid Parentheses
Leetcode 37 Sodoku Solver
Leetcode 212 Word Search II （I, II）
Leetcode 1087 Brace Expansion
Leetcode 399 Evaluate Division
Leetcode 1274 Number of Ships in a Rectangle
Leetcode 1376 Time Needed to Inform All Employees
Leetcode 694 Number of Distinct Islands
Leetcode 131 Palindrome Partitioning
基于排列组合的DFS: 其实与图类DFS方法一致，但是排列组合的特征更明显
Leetcode 17 Letter Combinations of a Phone Number

// 元素无重不可复选、元素无重可以复选、元素有重不可复选
// 并且组合的话需要start去控制，按照数的模型就是1被第一棵树都占据了
// start = i + 1;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 1,1元素无重不可复选 & 组合 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Leetcode 78 SubsetsI 组合 & 元素无重不可复选 基本款 1,1
    需要剪枝，剪枝囊括在0, start, i里面
    只要关注树的模型，会发现只有第一棵树有1，因为第一棵树把所有的情况都枚举光了，所以可以用start来控制
    对于二叉树来说有前中后序遍历，但是对于列表来说只有前后序遍历, 前序和后序的区别在于for循环的前面还是后面处理逻辑
    只要对这一整棵树进行前序遍历就行了，把所有的集合加入结果集中，因为没有长度限制，每一个都要收集，如果只要收集某一层就在收集之前加入判断条件
Leetcode 216 Combination SumIII:
    先写框架，分析是组合还是排序，如果是组合的话start必用，排序就可以不用了
    判断结束条件，targetLeft == 0 && col.size() == k
Leetcode 77 CombinationsI  组合 元素无重无可复选 子集款
    // 在上一题的基础之上加上条件 == k.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 1,1元素无重不可复选 & 组合 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2,1元素无重不可复选 & 排列 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 每一颗子树都要有1、2、3，所以for (int i = 0) 开始，但是自身选过的又不能选，所以需要used. 如果不用used就是可重复选了
// start = 0
Leetcode 46 PermutationI 排列 & 元素无重不可复选 子集款 2,1
    ⭐️⭐️ DFS回溯非常经典的题目
    used[i] = true;
    col.add(nums[i]);
    backTrace(nums, col, used);
    col.remove(col.size() - 1);
    used[i] = false;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 2,1素无重不可复选 & 排列 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 1,2元素有重不可复选 & 组合 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Leetcode 90 SubsetII 子集/组合 元素可重不可复选 组合是子集的特殊场景
    先排序，让相邻的靠在一起 只要用重复就需要排序
    但是要怎么剪枝就是在for循环里面加判断条件continue 这一题就是 i > start 而不是 i > 0;
    i > 0的话会把所有重复的元素当成一个 就不会出现[1, 2, 2]这样的子集
Leetcode 40 Combination SumII: 元素有重不可复选 最复杂场景
    排列的去重比较麻烦点 used[i]: continue; i > 0 && nums[i] == nums[i - 1] && !used[i - 1];
    组合的去重就是简简单单的used? 还是 nums[i] == nums[i - 1];
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 1,2元素有重不可复选 & 组合 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2,2元素有重不可复选 & 排列 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Leetcode 47 PermutationII 排列 元素可重不可复选
    只要有重复就需要排序，不然无法剪枝
    什么情况下要用used? 排列不需要start来控制，组合才需要;
    可重复的元素造成影响巨大: 需要剪枝
    如果单单是nums[i] == nums[i - 1]; continue 有什么问题呢？ 我们要1,2,2'这个值 但是不要1,2,2'这个值
    答案是: 保证相同元素在排列中的相对位置保持不变。 用i > 0 && nums[i] > nums[i - 1] && !used[i - 1]; 两者相等的时候且前面的那个元素没用过 就continue
    要保证前面那个数据已经用过了 就可以以2 -> 2' -> 2''的方式走
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 2,2元素有重不可复选 & 排列 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 3,1元素无重可复选 & 组合 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// start = i;
Leetcode 39 Combination Sum: 元素无重可复选 1,3
    组合: for (int i = start): 不管什么情况i永远都等于start
    排列: for (int i = 0):
    用下一层是start还是i区分到底可不可重复
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 3,1素无重可复选 & 组合 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


Leetcode 416 Partition Equal Subset Sum 分成两个等值的子集合
    可以演变成存不存在元素可以满足相加之和刚好等于target 背包大小为target, nums为包中物体 - 组合
    用dp: 0 -> target dp[0] = true;

Leetcode 698 Partition to K Equal Sum Subsets 分成K个等值的子集合
从球儿或者桶儿的视角来看
可以不需要List<List<>> 转而成为数组，只要把数字望上面加就好了
这种必须得要两个循环 or 循环 + 递归
int[] nums, int index, int[] bucket, int target;
index: nums的下标也就是start
1. 当index == nums.length; 判断每个bucket里面的值等不等于target 所以target不能减
2. 穷举每个桶，判断桶的bucket[i] + nums[index] > target;
3. 进行放入回溯抽离三步法，判断回溯结果如果是true直接返回
从值的角度，往每个桶里面放看行不行
自己写巨难，现在要是考到了我也能编出来

// Arrays.stream(nums).reduce(Integer::sum).orElse(0);
Leetcode 526 Beautiful Arrangement (similar to 46)
题目都看不懂我的亲娘哟

记忆化搜索（DFS + Memoization Search）：算是动态规划的一种，递归每次返回时同时记录下已访问过的节点特征，避免重复访问同一个节点，
可以有效的把指数级别的DFS时间复杂度降为多项式级别; 注意这一类的DFS必须在最后有返回值，不可以用排列组合类型的DFS方法写;
for循环的dp题目都可以用记忆化搜索的方式写，但是不是所有的记忆化搜索题目都可以用for循环的dp方式写。
Leetcode 139 Word Break II
    也是老一套 转移方程是 if (set.contains(s.substring(i - j, i + 1)) && dp[i - j] == 1)
    if (i >= len && word.equals(s.substring(i - len, i))) { dp[i] = dp[i] || dp[i - len]; }
    dp = new int[length + 1] 真是妙啊 初始化值要设置好 还有涉及到String的位置是真的麻烦
    如果这时候word在外面也就是定了word的一个排序 实际上word的排序我们是不清楚的
Leetcode 72 Edit Distance
    这一题主要是画图，DP table. 基本上就知道 Math.min(增, 删, 改);
    和lcs最长公共子数组的区别: 画图就知道了，这个初始化要初始化1、2、3、4、5，而lcs初始化都是0
Leetcode 377 Combination Sum IV ✅
    组合问题统一解法 for target for num: dp[i] += dp[i - num];
    // 背包有组合、最值、目标 回头复习一下
Leetcode 1235 Maximum Profit in Job Scheduling
Leetcode 1335 Minimum Difficulty of a Job Schedule
Leetcode 1216 Valid Palindrome III
Leetcode 97 Interleaving String
    字符串之间的比较只能用length和equal
    Ok不搞了 本来没用思路 看题解用的是表格的模板 横排和综排分别是s1和s2和s3对上的部分，主要能有一条线走到右下角为true就说明可以拼起来
Leetcode 472 Concatenated Words
Leetcode 403 Frog Jump
Leetcode 329 Longest Increasing Path in a Matrix
全tm hard.

前缀和（Prefix Sum）
基础知识：前缀和本质上是在一个list当中，用O（N）的时间提前算好从第0个数字到第i个数字之和，在后续使用中可以在O（1）时间内计算出第i到第j个数字之和，
一般很少单独作为一道题出现，而是很多题目中的用到的一个小技巧, 前缀和有一个特点就是nums[i] - nums[i -  1] = originNums[i];
还有一个特点就是两个数之间相减，得到的结果是两个数中间的数目的和
常见题目：
Leetcode 53 Maximum Subarray
    这题是存在负数值的，如果只有正数值是不是只要滑动窗口就行了? 之前就想过负值是很麻烦的事情
    没想到这么简单[Facepalm] 核心在于如果nums[i] > ans = (nums[0] +到 nums[i - 1]) ? ans = nums[i]; 如果之前加起来还没我大，不好意思 你们都滚吧
    一个维护最大值，一个维护多个num相加的值;

Leetcode 1423 Maximum Points You Can Obtain from Cards
    就也很简单，方法有很多种，我用的是两边的k前缀和成两个数组，两个数组的取值相加为k 取最大
    也可以做滑动窗口，从length - k -> k其中取最大，就是末尾要rotate一下
    护着反向操作，在数组里面维护一个len-k的窗口，保证窗口里面的和最小，外面的不就最大了？ 和第二条刚好互补一下
    还有max = Math.max(res, pre[left] + pre[n - k + left]);

Leetcode 1031 Maximum Sum of Two Non-Overlapping Subarrays
    像这题就是先算出前缀和 然后跟去长度去减 一个是n一个是m 也就是结局是 nums[i] - nums[i - n] + nums[j] + nums[j - m] 最大 且不重合
    两个、不重叠、子数组: 枚举分割点，即分割点左边是L右边是M，反之亦然
    妈的终于写出来了，维护两个前缀和一个是正常顺序，另外一个是从尾部加到头部，第一个元素为最大值
    然后Math.max(func(x, y), func(y, x))的方式用同一段代码去执行不同的逻辑: nums, pre, suf
    函数内部走dp left[i] = Math.max(left[i - 1], pre[i] - pre[i - x]);
    right[j] = Math.max(right[j + 1], suf[j] - suf[j + y]);
    res = Math.max(res, left[j] + right[j]); // 到这个为止以及之前 left的最大值和 right的最大值相加

    没看懂 不想看了
Leetcode 523 Continuous Subarray Sum
Leetcode 304 Range Sum Query 2D - Immutable
    ========================================
以上内容皆为面试中高频的知识点，以下知识点和题目在面试中属于中等频率（大概面10道题会遇到一次），时间不足的情况下，请以准备上面的知识点为主。
=====================================================================================================================

并查集（Union Find）：把两个或者多个集合合并为一个集合
基础知识：如果数据不是实时变化，本类问题可以用BFS或者DFS的方式遍历，如果数据实时变化（data stream）则并查集每次的时间复杂度可以视为O（1）；需要牢记合并与查找两个操作的模板
常见题目：
Leetcode 721 Accounts Merge
Leetcode 547 Number of Provinces
Leetcode 737 Sentence Similarity II
Leetcode 305 Number of Islands II

字典树（Trie）
基础知识：（https://zh.wikipedia.org/wiki/Trie）；多数情况下可以通过用一个set来记录所有单词的prefix来替代，时间复杂度不变，但空间复杂度略高
常见题目：
Leetcode 208 Implement Trie (Prefix Tree)
Leetcode 211 Design Add and Search Words Data Structure
Leetcode 1268 Search Suggestions System
Leetcode 212 Word Search II

单调栈与单调队列（Monotone Stack／Queue）
基础知识：单调栈一般用于解决数组中找出每个数字的第一个大于／小于该数字的位置或者数字；单调队列只见过一道题需要使用；不论单调栈还是单调队列，单调的意思是保留在栈或者队列中的数字是单调递增或者单调递减的
常见题目：
Leetcode 85 Maximum Rectangle
Leetcode 84 Largest Rectangle in Histogram
Leetcode 907 Sum of Subarray Minimums (与84类似)
Leetcode 739 Daily Temperatures
Leetcode 901 Online Stock Span
Leetcode 503 Next Greater Element II
Leetcode 239 Sliding Window Maximum （唯一的单调队列题）

扫描线算法（Sweep Line）
基础知识：一个很巧妙的解决时间安排冲突的算法，本身比较容易些也很容易理解
常见题目：
Leetcode 253 Meeting Room II（Meeting Room I也可以使用）
Leetcode 218 The Skyline Problem
Leetcode 759 Employee Free Time

TreeMap
基础知识：基于红黑树（平衡二叉搜索树）的一种树状 hashmap，增删查改、找求大最小均为logN复杂度，Python当中可以使用SortedDict替代；SortedDict继承了普通的dict全部的方法，除此之外还可以peekitem(k)来找key里面第k大的元素，popitem(k)来删除掉第k大的元素，弥补了Python自带的heapq没法logN时间复杂度内删除某个元素的缺陷；最近又在刷一些hard题目时候突然发现TreeMap简直是个神技，很多用别的数据结构写起来非常麻烦的题目，TreeMap解决起来易如反掌。
常见题目：
Leetcode 729 My Calendar I
Leetcode 981 Time Based Key-Value Store
Leetcode 846 Hand of Straights
Leetcode 218 The Skyline Problem
Leetcode 480. Sliding Window Median (这个题用TreeMap超级方便)
Leetcode 318 Count of Smaller Numbers After Self (这个题线段树、二分索引树、TreeMap都可以)

动态规划（Dynamic Programming）
基础知识：这里指的是用for循环方式的动态规划，非Memoization Search方式。DP可以在多项式时间复杂度内解决DFS需要指数级别的问题。常见的题目包括找最大最小，找可行性，找总方案数等，一般结果是一个Integer或者Boolean。动态规划有很多分支，暂时还没想好怎么去写这部分，后面想好了再具体写吧。
常见题目：
    最重要的是状态转移方程 dp[i] = dp[i - 1] + dp[i - 2]; 根据关联情况决定到底要用多少的存储空间，这里n只跟n - 1, n - 2相关, 所以只要三个指针
Leetcode 62 Unique Paths II
    毫无悬念
Leetcode 70 Climbing Stairs ✅
Leetcode 198 House Robber ✅
    状态转移方程 Math.max(house[n] + dp[n - 2], dp[n - 1]); 前一个是选择偷这一家，后一个是选择不偷这一家
Leetcode 64 Minimum Path Sum ✅
    状态转移方程是 Math.min(pos[row - 1][column], pos[row][column - 1]) + grid[row][column];
    if (i == 0) else (j == 0) else {};
    二维存储空间的dp 和一维存储空间的dp 因为for for是一行行下去的，当前一行的值只和上一行有关系，所以可以直接在一行里更新
    如果遇到从左侧来的 dp[j] = dp[j - 1] + value, 如果遇到从上侧来的 dp[j] = dp[j] + value;
    这道题里是顺序覆盖，后面还会遇到需要倒序覆盖的

// 子序列比较麻烦 因为可以不连续
Leetcode 300 Longest Increasing Subsequence (接龙型dp)
    接龙型dp的核心解决方案是dp[i]可以表示以i结尾、最长子序列长度
    核心在龙尾 其他没了 这道题记住要返回的是longest，不一定是在dp[n] 所以需要用额外的max记录

Leetcode 674 Longest Continuous Increasing Subsequence (接龙型dp)
    双指针就行，完全用不到dp 简单到让我怀疑人生

Leetcode 368 Largest Divisible Subset (接龙型dp)
    接龙吗 算是接龙吧
    比较麻烦，核心是记录最大长度和从何而来 里层for循环用于查找满足条件的最长的前辈们, 最终通过maxPos往回找到从-1为止
    len = 1, prev = -1, maxFlag = 1, max = 0;
    int[] length = 1, int[] from = -1;

Leetcode 354 Russian Doll Envelopes (接龙型dp， 300的2D版)
    套娃 hard 有意思 但是超时，3、4题解没看下去，4主要说的是二分

Leetcode 312 Burst Balloons (区间型dp) =========== not done yet

//  前缀型有点难搞啊 LCS
Leetcode 1143 Longest Common Subsequence (前缀型dp)
    前缀型，没看出来前缀 +1 大法
    核心是用一个二维数组记录dp[][] 当text1[i] text2[j]时候两者拥有的最长子序列长度
    if text1[i] == text2[j] ? dp[i][j] = dp[i - 1][j - 1] + 1 : dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
    这题是不需要连续的 所以后面是一个max

Leetcode 712 Minimum ASCII Delete Sum for Two Strings
    两字字符串型的dp[][]装的一定是当s1在0-i地位置，s2在0-j的位置两个有共同的子串
    解决了我最担心的隔了一个的问题 没说要连续的主要是 连续就更好办 这种方法是可以应对不连续的
    初始化首行和首列分别为s1,s2的ASCII，if(c1[i - 1] == c2[i - 1]) dp[i][j] = dp[i - 1][j - 1]; 现在是最小值，这时候不会做删减所以被删的值不会增加
    dp[i][j] = Math.min(dp[i - 1][j] + c1[i - 1], dp[i][j - 1] + c2[j -1]); // 左边是删左边，右边是删右边
    不过还是不知道为啥这样可以，主要心里有一根刺，会不会这个地方不应该删emmm 或者只通过大小来删莽了一点 不管了

Leetcode 1062 Longest Repeating Substring (dp方法与longest common substring一致)
    这题是需要连续的，所以if(c[i - 1] != c[j - 1]) ? dp[i][j] = 0;

Leetcode 718 Maximum Length of Repeated Subarray (和1062本质上一样)
    一毛一样，是需要连续的子区间

Leetcode 279 Perfect Squares 分割型的dp 跟普通dp不一样，普通dp只依赖相邻位置，分割型依赖的是满足分割条件的位置
    for (int j = 1; j * j <= i; j++)
    dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
    因为要和自己判断最小 Arrays.fill(dp, Integer.MAX_VALUE);

等值背包比较简单 dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]]; 不选或者选
第二层forj可以从0开始 可以从nums[i - 1]开始，如果是布尔值要考虑dp[i][0]的初始化问题
Leetcode 474 Ones and Zeros (背包问题
    判断0的数量要大于字符串需要0的数量，1的数量要大于字符串需要1的数量

// 今晚好好把这两题高了就干别的去了 两道题都是完全背包啊
Leetcode 322 Coin Change
    完全背包 因为是求最小值 先fill amount + 1; 为了不关心顺序把coin放在外面; 因为是完全背包 所以第二层是正序 可以无限用当前的东西
    求组成target最少的硬币数量
    dp[j] = Math.min(dp[j], dp[j - coin] + 1);

Leetcode 518 Coin Change II (01背包型)
    是组合数量 就是有多少种组合
    外层target内层item是求组合数 阶梯 + 零钱兑换
    外层item内层target是求排列数 经典背包
    差别在于外层item是指定了顺序，不会重复所以叫组合，适合凑零钱的无差别情况
    dp[i] += dp[i - coin];

Leetcode 256 Paint House
    三种情况分开来讨论 prevRed, prevBlue, prevGreen. curRed = min(blue, green) + costs[i][0];
    return min(min()); 和House Robber II有那么一点点像

Leetcode 121 Best Time to Buy and Sell Stock
    无语 什么dp 正常遍历一遍就行了 主要是过去的最小值永远只有一个且会随着时间改变

Leetcode 55 Jump Game
    就也不需要dp 一个farthest指针就够了还能往前走几步 if (farthest == 0 && i < nums.length - 1) return false;

Leetcode 45 Jump Game II
    也是蛮简单的dp 这个主要边界值麻烦 dp中的内容代表走到当前这一格最短需要几步 if (nums[j - 1] + j < i) continue; dp[i] = Math.min(dp[i], dp[j] + 1);
Leetcode 132 Palindrome Partitioning II
    hard题 不想写了 写一下思路吧 为了避免每次都去判断目标字符串是否是回文，可以建立一个isParlindrome[][]去记录[i, j]的子串是否是回文
    i == j / cs[i] != cs[j] / i - j == 1 || isPalindrome[i + 1][j - 1];
    下面只是单纯的处理回文和Math.min(dp[i], dp[j] + 1);
    s.charAt 可以用 s.toCharArray() 转换成char[]来处理

Leetcode 91 Decode Ways
    难是不难的，普通讨论，状态转移方程 dp[i] = dp[i - 1] + dp[i - 2]; 必须保证dp[i - 2]不为空，所以用了dp = int[length + 1]并且在01两个位置赋1
    原理是我把当前的字符当成单独的，但是把他跟前面一个拼起来当成一个二位数
    只是=右边的两个值是有条件的相加，当前值不为0才可以当成单独的数，两位数必须满足条件才能组成数字
    最大的问题是0的处理，当0在最前面的时候整个题解不成立，当连续两个0在字符串中间的时候题解不成立，判断数字的时候也如此

Leetcode 639 Decode Ways II
    跟上题相比 核心是增加对*的处理 当一个*的时候 * 9 d* dd ** *d 四种情况

Leetcode 221 Maximal Square
    这个图一画我就有点懂了嘛，重要的是dp怎么赋值，当x > 0 && y > 0 需要左边，上边，左上边三边的最小值 + 1
    通过new int[m + 1][n + 1]的方式 来避免一部分边界的处理，这种只可以存在于多加了边界没关系的情况
    核心判断: if (matrix[j - 1][j - 1] == '1') dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1;

Leetcode 1277 Count Square Submatrices with All Ones (可以使用221一样的解法)
    我就感觉哪里做过 把01的matrix转化为dp是以当前这个位置为右下角端点，能有几个正方形，上一题是边多长，其实一个意思

Leetcode 213 House Robber II
    其实相比于直线型就多了一个限制，当第一个房间被抢的时候，不允许抢最后一个房间 that's all;
    不需要判断，直接设置两种结果，第一个房间抢和第一个房间没抢 两个结果做比较
    当无法判断的时候就直接自己分别计算两种情况再合
    既然两个不能碰就不让他们见面好了
    return Math.max(myRob(Arrays.copyOfRange(nums, 0, nums.length - 1)), myRob(Arrays.copyOfRange(nums, 1, nums.length)));
    绝了
    优化一下 不用复制数组 可以提供left 从0开始或者从1开始，走的步长一样 i = 2; i < nums.length; i++，dp[i - 2] + nums[i + left - 1];
    一共走nums.length - 1步
    再往后可以改成pre1, pre2, res的方式
    res = 状态转移方程, pre2 = pre1; pre1 = res;

Leetcode 740 Delete and Earn
    转化题意为House Robber.

==== hard晚点刷吧
Leetcode 87 Scramble String 困难
Leetcode 174 Dungeon Game
Leetcode 115 Distinct Subsequences
Leetcode 72 Edit Distance

Leetcode 44 Wildcard Matching
Leetcode 10 Regular Expression Matching
Leetcode 32 Longest Valid Parentheses
    可以通过栈的方式找到所有的下标设置为1，然后找到最长连续为1的长度就是答案
    核心dp[i]是以i结尾的最长有效括号 如果是左括号为0，如果是有括号又分左边是左括号还是右括号
    dp[i] = dp[i-1] + 2 + dp[i-dp[i-1]-2]; 基本不会遇到 遇到的话就把思路写一下

Leetcode 1140 Stone Game II 题意太复杂
Leetcode 1048 Longest String Chain
Leetcode 1235 Maximum Profit in Job Scheduling (DP + binary search)
Leetcode 1043 Partition Array for Maximum Sum
Leetcode 926 Flip String to Monotone Increasing

字节题目:
ByteDance1
Ali面试题: 1. 设计一个可以有过期时间的缓存，JDK范围内，要求不可以引发OOM。 2. 开线程，读取文件，进行split，用HashSet就能完成


重刷算法
公共注意点
1. 开始的时候要做参数校验
2. 最后的时候要看清楚返回的是什么
3. 考虑三个要素 第一次 最后一次 和中间任意一次
4. 注意分号
5. 注意边界: 比如合并区间的easy题，最后是要判断两个区间的右边界值大小!! 不要理所当然！
6. 抓住核心，核心还是需要分析，跟做技术方案和做数学题一样。每个变量弄清楚了，代码自然写出来


题型分类

排序
No27. No75: No75用的是循环不变量这个概念，但是循环不变量在交换的时候是不保证顺序的，No27也可以用，N路就用N个指针，一个是循环变量i 剩下如果还有两路就用p0,p1如果只有一路就直接p
KthLargestElement: quick select

处理多数组的时候，比如两数组可以通过调换位置来保证第一个数组的长度一定小于等于第二个数组
奇数个元素的中间元素就是nums[length / 2]，01234 = 5 / 2 = nums[2] = 2;
偶数个元素的中间元素是nums[length / 2]和nums[length / 2 - 1];

链表
链表的取中间点，如果是要断链的记得一定要split
基本上都可以用到仿真头
翻转链表一定要能默写
ListNode reverseList(ListNode head) {
  ListNode prev = null;
  ListNode curr = head;
  ListNode next = head.next;
  while (curr != null) {
    curr.next = prev;
    prev = curr;
    curr = next;
    next = next.next;
  }
}
检测循环就要想到快慢指针，链表有一个特点就是可以通过a == b来判断是否相等

数据结构
大顶堆和小顶堆，用数组来承载，主要关注heap[0]和heap.add(k)，然后进行swim和sink。主要是在父子之间进行替换这个叫啥旋转。
比如取第K大的值 就用最小堆只留k个元素，剩下的全部干掉，这样堆顶自然而然就是第K大的那个

通过两个Queue实现一个Stack
// 秘诀是通过第二个Queue中转，当然存在两个东西的时候，为了简便我们会永远保持第一个Queue有东西
记住queue常用的方法 offer/add - poll/remove / peek / isEmpty | LinkedList
记住stack常用的方法 push          pop           peek empty search

涉及到对数组中所有数据的遍历，可以通过一个二维数组标记对应位置的元素是否已经被访问过来处理
当然设计到matrix的访问，看需不需要用到削头 + 旋转数组的方式处理
数组指定容量的情况下是有默认值的，0和false
方向可以用{{1, 0}, {0, 1}, {0, -1}, {-1, 0}}来表示，方便直接对原pos进行加减得到下一个位置
当然也可以用directions % 4来获得当前的位置，每次对directions++;

背模版ok 包括dp 滑动窗口 链表等等
做了足够多的题目之后，拿到题目就会有感觉，知道怎么去解，甚至遇到trick也会想起和之前自己做过的哪个题目相近
注意细节就，不难，自己进行推演测试: Implement Queue using Stacks那一题
Queue的模型和Stack的模式在做相关题目的时候一定要牢记，不过仅限于实现一个Queue和实现一个Stack的情况下

题目中有一串数字，每次需要对两个数据进行运算，运算的结果再和另外一个数进行运算的时候用栈真的非常合适 特别还是按照顺序的 EvaluateReversePolishNotation

在从字符串中的数字转化成为数字的时候 (int)s.charAt(i) - 48需要
当然判断是否是加减乘除也可以这么做 s.charAt(i) < '0'; >=
突然激活了记忆 calculater中的可以使用 +- 来统一一部分流程，比如有了+-之后最后的过程就是sum数据的过程

计算器的题:
1. 150: 最简单了 ["2","1","+","3","*"] = (2 + 1) * 3 顺序都给你摆好了，只要简简单单遇到数字压入栈，遇到符号把前面两个入栈的数据捞出来运算一下就行，关注减号和除号的顺序
2. 227: " 3+5 / 2 " 困扰了我好久 看题解都看了两个小时，本来也像用跟上面一样的方式，但是发现不行，排序是核心，怎么排序呢，重要的有两点
  1. 前者不用关心读取超过10的数字的问题，这里需要关心
  2. 在读到操作符的时候需要关心后一个操作符，比较优先级，当然在读到字符串最后一个值的时候就不需要关心后面的操作符了
  核心: 1. 通过前一个操作符判断入栈的数据  2. 栈里面不留操作符，把所有的数据用正负数的方式push进去，最终只要对数据求和就可以拿到答案
最好不要做超前读 在当前的位置读取下一个或者下两个数据 感觉题目不会这么出 计算也容易出问题
那么问题来了，不超前读的情况下怎么才能判断前方有障碍呢，答案是滞后读 = =。通过滞后的操作符判断结果
不仅要关心后一个操作符，还要关心后一个数据。滞后读解决了这两个问题，首先数据读到了，还没入栈(也可以入栈)
其次 A + B * C cur = *, prev = + 决定了要怎么处理B 把B直接塞进去。既然用前操作符来判断，最后一定会出现一个边界，当前操作符没有更新了，读到的是数字，但是还是要操作

有加有减的原则是 先减再加防溢出

我的毛病1: 经常把if判断条件里面的==写成=

3. 224: 这个相比上面我也不知道是不是更难了，没有了乘除只有加减，但是却多了括号。有括号咱们就要开始拆括号
所以其中一个核心在于 -() 不是要去拆括号 拆永远都拆不好，而是想办法把()内的运算算掉变成一个值来拆括号
如果有全局的变量要注意全局变量是否要在循环之后初始化 比如isUnaryNow

// 在条件里的i++是没有意义的，只有++i才行，i++只能加在循环最后一行要用到i的地方
从头到尾的循环只是入栈的过程，真正处理的时候一定是从右到左的
发愁: 从前往后的默认firstOperand = '+' 从后往前的是已经拿到了secondOperand然后回退回去操作firstOperandList
单独写从后往前要怎么写哦 那就别单独写了

合并消除类的都用栈可以实现 不然会涉及到无限循环并且要判断是否里面所有的元素都是unique
栈有一个好处就是可以不用管右边，后续进来的内容，像RemoveAllAdjacentDuplicates这一题
只管和栈顶的元素作比较，如果是一样的就++ 如果不一样就重新计数，就算之前有被埋没的计数，当重建天日那天会有新的同类加上去的

char和int在一定程度上可以混着用，但是在做比较和输出的时候需要显示的做转换
笔试的时候要自己给自己造丰富的testcase

往stack里面塞一个MAX就是为了不检查边界？O1时间内 MinStack
突然有种强烈的预感 到关键的时刻 LRU会用上

O(n)时间求连续长度 hashMap把每个key对应的长度存在map里 叫什么reduce大法
矩阵置0 要求O(1)的空间利用， 正常情况下都需要用到O(mn) 想要完成目标就要想办法扣空间，比如在原矩阵的边上记录信息，到时候根据信息进行清算 注意边界和验算

集合里存的东西有个特点，可以用int[]的方式把在array或者List里的位置记下来 或者[val, Node]可以直接找到链表中的元素。或者用hashMap的value保存位置
记住random的写法
Random random = new Random();
nums[random.nextInt(idx + 1)];
// 还是建议一点点想，最后再把条件整合。考虑边界

判断字母异位分词的方案 -> sort 和count
分类分组的就用groupingby 看最终的返回是 分组返回List<List<>> 就要想到groupingby
妙用数组计数1 int[] counter = new int[26];
coutner[str.charAt(i) - 'a']++; 然后通过stringbuilder相加就可以得出结论
妙用数组计数2 int[] counter = new int[10];
用来替代HashMap<Integer, Integer>的count 专门用来记录数字的次数
counter[str.charAt(i) - '0']++;

delete是一种很不好的习惯 正经人谁用delete bullsAndCows

return 中用StringBuider会比 "" + "" + "" 快5ms
cows and bulls hints优点背诵

Java的优先级队列PriorityQueue底层实现是一个堆，一个堆就是一个完全二叉树分大顶堆和小顶堆，Java中默认实现是小顶堆，就每次可以从arr[0]中获取最小的值，并把列表还是链表底部的数提到最上面来并进行sink
尾部也可以因为维护着tail 看看源码吧宝
只要是数组就会有扩容机制 PriorityQueue中用的是单词grow
// 既然是小顶堆，peek()看的一定是最小那个值，当整个堆满了的时候，要把最大的数排掉 removeLast 这怎么做的 挤不掉啊

快排的复杂度O(nlogn)，而使用优先级队列时间复杂度为O(nlogk)
优先队列肯定比快排更快点
当层数很多的时候，要通过计算的结果进行比较，别忘了判重 通过set判重方便 用先塞进去然后last判断的方便丑
在叠加想成的时候看要不要用到long 一般比较少用到 丑数，丑数是这样的 我一直在纠结什么时候列表生成的长度到达k我就想停了，但是总是担心里面有没有漏的，解决方案是多生成点，生成到拿出k个数才停，后面多的那些不管了

想要给面试官留下一个好印象，争取短次ac的时候，一定要注意细节 比如o1 o2到底是要怎么输出的 小在先还是大在先，这也是我以前的一个大毛病，写完大体框架让系统帮我检查，这个还是以后要慢慢的改过来

Merge Sorted Array 要用O(m + n)的方法，明眼人一看就知道遍历一次，这时候的坑在最后m = 0, n = -1的时候 判断要分开，先判断m<0后判断n<0 或者直接分成 m >= 0 && n >= 0 和非来判断
PriorityQueue还可以通过排序 + size判断 + poll的方式保证heap中的数量保持一个恒定的数，然后取出来之后再可以选择正序或者倒序

去重不止可以用Set也可以用hashMap, 在count完之后直接用hashMap的key加进去

2. 看到O(1)的空间利用率和排序就知道O(1)是给middle用的，用divide and conquer 快排还是归并？
3. 看到时间复杂度O(nlogn) 应该是NO(logN)这两家伙相等的，都是有N层，N层就是地柜N次 ok? ，每次的时间复杂度都是logn
9. 归并排序和快速排序 每天回顾 快速排序是给一个arr[low] 找到他在列表中的位置，并且过程中进行快速交换保证左边的都比他小，右边的都比他大

快速排序2 * 3步走
int index = getIndex(int[] arr, int low, int hight);
quickSort(int[] arr, low, index - 1);
quickSort(int[] arr, index + 1, hight);
区间为左右闭区间

int tmp = arr[low]; // 然后以tmp为基准数
while (low < high) {
  while (low < high && arr[high] > tmp) {
    high--;
  }
  arr[low] = arr[high];
  while (low < high && arr[low] < tmp) {
    low++;
  }
  arr[high] = arr[low];
}
arr[low] = tmp;
return low;
// 最后记得 <= tmp >= tmp


// 排序自带之后就不是什么问题了，除非单独考你排序的
学习比较的写法
List<int[]> sortedList = Arrays.stream(intervals).sorted(Comparator.comparingInt(k -> k[0])).collect(Collectors.toList());
还有二位数组从List<int[]>转为int[][]
intResult.toArray(new int[intResult.size()][]);

注意关注space complexity 和time complexity
如果给定数组 最后返回的是数组内容 无关下标 则可以考虑直接排序
数组的去重很麻烦的 要挨个比较过来 复杂度及高 就算用+""的方式也需要先排序
数组题 又有index又有数字的话 在对比时候需要弄清楚